<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id="myc3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	<!-- 在这里定义了一个c3p0连接池 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ceshi"/>
		<property name="user" value="root"></property>
		<property name="password" value="14159265jkl"></property>
		<property name="minPoolSize" value="1"></property>
		<property name="maxPoolSize" value="40"></property>
		<property name="initialPoolSize" value="2"></property>
		<property name="maxIdleTime" value="30"></property>
	</bean>
	<!-- 加入数据库操作了 将数据库的操作类传入 -->
	<bean id="MyJdbcBusiness" class="p_spring事务.JDBC_Business">
		<property name="dataSource" ref="myc3p0"></property>
	</bean>
	<!-- 使用spring 内部的jdbc 数据库管理者 这个类是PlatformTransactionManager的具体实现类来处理事务处理流程 -->
	<!-- DataSourceTransactionManager数据源事务处理器是针对JDBC连接提供的事务处理器实现，即数据源事务处理器把数据库Connection连接和当前线程进行绑定，通过直接调用数据库连接Connection的提交和回滚方法实现事务的提供和回滚处理 -->
	<!-- 个人猜测  -当spring进行代理的时候只是将数据库链接部分进行代理也就是说 动态的增强需要代理的方法,如果方法中抛出了异常将会对,传入的数据库链接的connection进行回滚操作,这样就能理解为什么 在数据库操作层和事务管理层要传入同一个数据库链接池(datasource-具体的方法还要看更多的东西比如手动实现打他source)-->
	<bean id="myTransactionMamager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myc3p0"></property>
	</bean>
	<bean id="mycustomerTransfer" class="p_spring事务.useProxy.CustomerTransforuseProxy">
		<property name="jDBC_Business" ref="MyJdbcBusiness"></property>
	</bean>
	<!-- 生成一个新的代理工厂类(TransactionProxyFactoryBean)这个类将会增强需要代理类中的方法,从而实现事务的管理 -->
	<bean id="TransferProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target" ref="mycustomerTransfer"></property><!-- 声明代理的类 -->
		<property name="transactionManager" ref="myTransactionMamager"></property><!-- 声明代理的管理者 -->
		<!-- 声明代理的事务属性 -->
		<property name="transactionAttributes">
			<props>
				<!-- 这个key可以表明表示为那个方法进行增强  可以使用表示符-->
				<prop key="t*">PROPAGATION_REQUIRED</prop>
<!--
五个事务隔级别分别为：lsolation的属性值

1，default

默认的事务隔离级别

2，read_uncommitted

读未提交，一个事务可以操作另外一个未提交的事务，不能避免脏读，不可重复读，幻读，隔离级别最低，并发性 能最高

3，read_committed

读已提交，一个事务不可以操作另外一个未提交的事务， 能防止脏读，不能避免不可重复读，幻读。

4，repeatable_read

能够避免脏读，不可重复读，不能避免幻读

5，serializable

隔离级别最高，消耗资源最低，代价最高，能够防止脏读， 不可重复读，幻读。


七个事务的传播行为

1，propagation_required

如果一个事务存在，则支持当前事务，如果不存在，则创建新的事务

2，propagation_supports

如果一个事务存在，则支持当前事务，如果不存在，则非事务的方法运行

3，propagation_mendatory man de chui

如果一个事务存在，则支持当前事务，如果存在，则抛出异常

4，propagation_requires_new

总是要开启一个新的事务，如果事务存在，将该事务挂起

5，propagation_not_supported

总是非事务方法运行，并挂起所有的事务

6，propagation_never

总是非事务方法运行，如果事务存在则抛出异常

7，propagation_nested   ne si ti d

某一个事务存在，则运行在一个嵌套的事务中-->
				
				
				
			</props>
		</property>
	</bean>

</beans>
