<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mybatis中使用自动映射的文件的时候需要使用一个接口所以 -->
<!-- mapper标签中的namespace 表示配置文件的接口 -->
<!-- !!!!这里非常重要 注意下面语句标签的时候必须加上命名空间才是最好的这样可以防止调用重复 -->
<mapper namespace="S_Mybatis.c_Mapping接口.Mymapping接口">
	<!--映射器 -->
	<!-- 1. select 标签 -->
	<!-- 
					-标签属性-
			1.id   				表示使用接口中那个方法对应这个标签,命名标准使用方法名称
			2.parameterType		表示传入进这个标签所使用的数据的封转集合,(可以使用int等基本类型,如果有多个类型,需要使用java对象进行封装)
								取参数使用ognl表示方法 #{xx.xxx}
			3.returntype		表示方法返回值对应的类型可以使用基本类型或者使用自定义的javabean-(必须使用在允许自动匹配的条件下)
			4.returnMap			使用映射集引用来作为返回值值的匹配项相当于returntype的复杂形式(不允许在自动配置的条件下)
			5.flushCache		将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
	 		6.useCache			将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
	 		7.timeout			这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
	 		8.resultOrdered		这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。
			9.resultSets		这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。
	 		10.statementType	告诉mybatis使用JDBC那个statement工作-STATEMENT，PREPARED 或 CALLABLE 的一个(statement,prepared,CallableStatement)
	 		11.resultSet		对应resultSet接口FORWARD_ONLY(允许有向前访问)，SCROLL_SENSITIVE(双向跟踪但是修改不会及时反映出来) 或 SCROLL_INSENSITIVE(双向修改结果及时反映出来) 中的一个，默认值为 unset （依赖驱动）。
	 		12.databaseID		匹配数据库是指的数据库标识(在xml配置文件中使用的databaseIdPr) 
	 		13.
		 -->
	<select id="getJavaBean"  parameterType="int" resultType="S_Mybatis.z_javabean.MyjavaBean"></select>
	<!-- 
			2.insert update delete标签
			id					命名空间中的唯一标识符，可被用来代表这条语句。
			parameterType		将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
			parameterMap		这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
			flushCache			将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句）。
			timeout				这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
			statementType		STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
			useGeneratedKeys	(仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键-就是主键自动增加
			keyProperty			这个属性是列名称表示当使用数据库自增的属性的时候这个属性表示传入的参数对象
			keyColumn			这个属性是数字表示第几列这个属性和上面的效果相同 - 
			databaseId			如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。		
	 -->
	<insert id="insertJavabean" ></insert>
	<update id="updateJavabean"></update>
	<delete id="deleteJavabean"></delete>
	<insert id="x">
		<selectKey></selectKey><!-- 这个标签可以用来对属性属性进行定制但是不要使用因为很麻烦 -->
	</insert>
	<!-- 3.sql标签-动态的声明了一个可以进行任意嵌入的代码片段 -->
	<sql id="userColumns"> ${alias}.id,${alias}.username,${alias}.password </sql>
	<!-- 4.include-引入一个sql标签 -->
	<insert id="">
		<include refid="userColumns"></include>
	</insert>
	<!-- 5.cache mybatis默认只是开启了一级缓存也就是说针对于同一个sqlsession才会缓存 -->
	<cache></cache><!-- 简单的只使用这一个标签就是开启了二级缓存,默认的配置是 -->
	<!-- 
			默认属性：-!!!默认属性可以被select标签的usecache属性显示的表示是否使用缓存
	 		映射语句文件中的所有 select 语句将会被缓存。
			映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。
			缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。
			根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。
			缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。
			缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。
			flushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,
			缓存仅仅调用语句时刷新
	 -->
	 <!-- 使用默认的缓存的时候可以进行相应的配置 -->
	 <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>
	<!-- 开启缓存
		size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。
		readOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了
		很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。
		eviction 缓存策略：
				LRU – 最近最少使用的:移除最长时间不被使用的对象。
				FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
				SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
				WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。
	 -->
	<cache type="S_Mybatis.e_自定义mybatis缓存.自定义缓存文件"></cache><!-- 自定义缓存 -->
	<!-- <cache-ref namespace="com.someone.application.data.SomeMapper"/> -->
	<!--参照缓存： 回想一下上一节内容, 这个特殊命名空间的唯一缓存会被使用或者刷新相同命名空间内 的语句。也许将来的某个时候,你会想在命名空间中共享
	相同的缓存配置和实例。在这样的 情况下你可以使用 cache-ref 元素来引用另外一个缓存。 -->
	
	
	<!-- 配置文件的参数问题
			使用ognl表达式可以讲表达式中的字符串动态的更换成想应的字符串类型
			#{property,javaType=int,jdbcType=NUMERIC}
			使用${xxx}只是动态的插入一个字符串的值
	 -->
	 
	 <!-- 6.resultMap-mybatis中最重要和最关键的标签 -->
	 <resultMap type="S_Mybatis.z_z_MyBatis实例.javabean.BeanOne" id="myid" >
	 	<!-- 
	 			1.resultMap标签的属性 
	 			type-指定结果集的实现类   	id-指定这个结果集的唯一id标识
	 			automapping-是否启用自动映射     		extends-表示使用
	 	-->
	 	<!-- 
	 			2.construction 
	 			标签-当javabean中含有无参数的构造函数的时候可以使用这个方法进行构造注入
	 	 -->
	 	 <constructor>
	 	 	<!--注意当使用这个方法的时候 构造函数不能使用自动装箱的方法,也就是说int类型要写成Integer -->
	 	 	<idArg column="name" javaType="String" jdbcType="VARCHAR" />
	 	 	<!-- 使用这个方法进行构造的时候要保证参数的顺序是按照自己定义的顺序的 -->
	 	 	<arg column="name" javaType="String" jdbcType="VARCHAR"/>
	 	 </constructor>
	 	<!-- id 属性和result属性 这两个属性是相同的效果的只不过id属性表示的是主键二result表示的是一般的键 -->
	 	<!-- 
	 			3.id和result的变量属性
	 			column-指定进行映射的列名称(就是使用mysql数据库进行查询操作最后上面出现的一列)   	javaType-指定映射出来的java变量类型一般指定是基本的变量类型
	 			property-指定需要映射的javabean的变量名称	 jdbcType-指定映射出来的数据变量类型
	 	 		typeHandler-指定使用的转换器!!!必须在mybatis的配置文件中进行配置
	 	 -->
	 	 <!-- 使用参数注入的时候不必像构造注入的时候那样int类型必须转化成integer -->
	 	<id column="name" javaType="String" property="name" jdbcType="VARCHAR"/>
	 	<result column="age" javaType="String" jdbcType="VARCHAR" property="age"/>
	 	<!-- 4.设置一对多和一对一连级查询 -->
	 	<!--
	 			 这两个属性可以使用嵌套模式 当使用其那套模式的时候需要进行相关的属性设置
	 			通过外链接的方法时 必须的属性！！	property - 设置对应结果集的javabean中的参数
												javatype-oftyp(数据库开启了自动映射) - 返回结果集的集合或者使用一个resultMap
				通过sql嵌套方法时   	必须！！		property - 设置对应结果集的javabean中的参数
												colomn - 使用关联的列 
												select - 调用的sql语句
		必须！！
	 	 -->
	 	 <!-- 一对一连级查询  pro表示类中对应的参数-->
	 	<association property="list" ></association>
	 	<!-- 一对多连级查询方法这个方法其实和传统的使用方法其实是没有什么区别的只不过需要将其中的属性编程一个集合(resultMap属性)并且保证关联集合中的属性名名称对应的数据库列植是通过数据库的查询出来的列值而不是自己在sql语句中定义的列值  -->
	 	<collection property="list" column="x" resultMap="myid"></collection>
	 	<!-- 
	 			property 			生成结果集中javabean对应的属性!!
				automapping  		自动映射 让得到的数据库列明和声明的结果集（参数名） 相同
				column  			进行一对多sql分层注入的时 决定使用哪一列进行判断!!
				columnPrefix  		允许我们在重复出现的字段名前加上一个统一的字符前缀- 一般不用
				fetchType 			可选的。 有效值是lazy和eager。 如果存在，它将取代此映射的全局配置参数lazyLoadingEnabled。
				jdbctype  			在这个表格之前的所支持的 JDBC 类型列表中的类型。JDBC 类型是仅仅 需要对插入, 更新和删除操作可能为空的列进行处理。这是 JDBC 的需要, jdbcType 而不是 MyBatis 的。
								如果你直接使用 JDBC 编程,你需要指定这个类型-但 仅仅对可能为空的值。
				javatype			一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名的列 表) 。如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。
								然而,如 javaType 果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证所需的 行为。
				notnullcolomn 		默认情况下，仅当映射到子对象的属性的列中的至少一列非空时才创建子对象。 使用此属性，您可以通过指定哪些列必须具有值来更改此行为，
								因此只有当任何这些列不为null时，MyBatis才会创建子对象。 可以使用逗号作为分隔符指定多个列名称。 默认值：unset。
				resultMap		!!
				resultSet
				typeHandle
				select    		!!表示用那个映射id的语句-查询的功能将会依次的进行查询先使用外层的查询语句然后在使用后面的查询语句
	 	 		oftype			返回的集合的每一个元素的属性
	 	 -->
	 	 <!-- 使用resultMap鉴别器 -鉴别器是使用在一个result中的里面的case属性的值将会使用外层定义的colum的属性的值都转化成javaTye后进行比较如果成立就会使用.里面定义的resultMap处理
	 	 		注意这就说明了映射的属性必须和原来的参数兼容否则就是不匹配的
	 	  -->
	 	 <discriminator javaType="S_Mybatis.z_z_MyBatis实例.javabean.BeanOne" column="xxx">
	 	 	<case value="1" resultMap="lll"></case>
	 	 </discriminator>
	 	 <!-- !!!!解决mybatis加载的性能问题 -->
	 	 <!-- 解决办法使用延迟加载和使用非层级加载 在mybatis 的配置文件中进行相关的配置(这个配置方法是全局性的)
	 	 		当不是用全局性的变量的时候可以使用在xml属性中如(select)定义的属性fetchType(eager lazy-指定使用延迟加载)
	 	  -->
	 </resultMap>
	 <resultMap type="S_Mybatis.z_z_MyBatis实例.javabean.BeanOne" id="lll" extends="yyy"></resultMap>
	 <!-- 4.Sql动态语句  ognl的标准查看截图  注意#{xxx}不是ognl表达式 使用方法见上面的parameter -->
	 <select id="xxx" parameterType="S_Mybatis.z_z_MyBatis实例.javabean.BeanOne">
	 <!-- 这里使用的ognl表达式 表达式的功能异常的强大他可以直接使用在变量作用域(parameterType中的yyy)中定义的变量名称别切可以调用变量的相关方法-->
		<!-- if就和java中的if语句插不多但是要注意使用转义字符-具体的自己查 -->
		<if test="name!=null"></if>
		<choose>
			<when test="name=null"></when><!-- if else-if else-->
			<otherwise></otherwise>
		</choose>
		<where><!-- 相当于 select语句中的where  当其中的条件语句完全成立的时候才加入 where语句-->
			<if test="xxx"></if><!-- 只用当之中的语句成立的时候才会动态的添加一个where否则不会添加where语句 -->
		</where><!-- 注意表达式中的ognl表达式中#相当于ActionContext. getContext();直接使用 参数就可以了 -->
		<!-- 通用where语句增强版 prefix-表示这段代码块的前缀,prefixOVerrides-表示填充这段代码的分割属性 -->
		<trim prefix="where" prefixOverrides=""></trim>
		<!-- 循环语句 -->
		<foreach collection="" close="" open=""></foreach>
		<!-- 
				collection - 一个数字或者list集合 
				item - 配置循环中的当前的元素
				index - 配置当前元素的下标
				open - close - 用什么元素将其中的 元素包裹起来
				separator - 各个元素的间隔符号
		-->
		<!-- 这个元素表示一个配置文件自己定义的上下文变量 -->
		<bind name="xx" value="xxx"/>
	</select>
</mapper>