<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 先进行整合数据源  我是用c3p0链接池-->
	<bean id="mydatasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ceshi"/>
		<property name="user" value="root"></property>
		<property name="password" value="14159265jkl"></property>
		<property name="minPoolSize" value="1"></property>
		<property name="maxPoolSize" value="40"></property>
		<property name="initialPoolSize" value="2"></property>
		<property name="maxIdleTime" value="30"></property>
	</bean>

	<!--
	-->
	<!-- 使用这个方法的时候必须载入相应的spring和mybatis的整合包 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mydatasource"></property>
		<property name="configLocation" value="classpath:config.xml"></property>
	</bean>
	<!-- 使用Template构建模版 -factory降级使用SqlsessionTemplate代替  注意了这个方法只能使用构造注入-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
		<!-- 使用配置类型 -->
		<constructor-arg index="1" value="BATCH"></constructor-arg>
	</bean>
	<!-- 1.传统的方法使用SqlsessionTemplate方法进行mapping文件的使用和操作 -->
	<!-- 配置自己真正需要使用的单例模式 -->
	<bean id="mydao" class="t_Spring和mybatis进行整合.整合.UserDaoImpl">
	<!-- 将生成好的Template注入到我们将要使用的Dao层中去 这样我们在使用的收只需使用spring框架的application方法就能实现动态的加入自己所需要使用的各种数据库操作方法 -->
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate"></property>
	</bean>
	<!-- 2.使用MapperFactoryBean配置的方法记性mapping的配置操作 -->
	<!-- 方法只有三个参数 一 代理的接口 二.使用的是浅蓝色诉讼Template 三.使用的SqlSessonfactory -->
	<bean id="userDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!-- 指定使用的代理接口 -->
		<property name="mapperInterface" value="t_Spring和mybatis进行整合.Myinterface"></property>
		<!-- 指定使用的Factory -->
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
		<!-- 指定使用的template -->
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate"></property>
	</bean>
	<!-- 3.使用MappperScannerConfigurer 使用自动扫描包进行动态的添加相关的各种接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="t_Spring和mybatis进行整合.Myinterface"></property>
		<!-- 指定使用的Factory -->
		<property name="sqlSessionFactoryBeanName" ref="sqlSessionFactory"></property>
		<!-- 指定使用的template -->
		<property name="sqlSessionTemplateBeanName" ref="sqlSessionTemplate"></property>
		<property name="annotationClass" value=""></property>
	</bean>
</beans>
