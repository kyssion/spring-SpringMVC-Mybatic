<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- xml配置的缺陷 只支持单例模式的切面  并且不能使用组合的aop表达式(&&args(xxx,yyy)) -->
	<bean id="myaophasconfig" class="n_springAOP.hasconfig.MyAopHasConfig"></bean>
	<bean id="aopbeantwo" class="n_springAOP.hasconfig.aopBeanTwo.AopBeanTwo"></bean>
	<aop:config>
		<!-- 设置一个切入点 -->
		<aop:pointcut expression="execution(* n_springAOP.hasconfig.aopBeanTwo.*.*(..)) and args(one,two)" id="mypoint"/>
		<!--配置切入的类  最后一个order表明优先级   可以进行省略 -->
		<aop:aspect id="myaopClass" ref="myaophasconfig" order="0">
		<!-- 当使用 arg-names方法的时候向参数中植入原函数的参数需要向植入的表达式中显示的写入 and args(..) -->
			<aop:before method="before" pointcut-ref="mypoint" arg-names="one,two"/>
			<aop:after method="after" pointcut-ref="mypoint" arg-names="one,two"/>
			<!-- 配置切面的时候也可以不进行指定配置好的切面而是直接进行切面配置 -->
			<aop:after-returning method="afterReturn" pointcut="execution(* n_springAOP.hasconfig.aopBeanTwo.*.*(..))" returning="returning"/>
			<aop:after-throwing method="afterthrow" pointcut="execution(* n_springAOP.hasconfig.aopBeanTwo.*.*(..))"/>
			<!-- 以上都是在初始化的过程中开放式 -->
			<aop:around method="around" pointcut="execution(* n_springAOP.hasconfig.aopBeanTwo.*.*(..))"/>
		</aop:aspect>
	</aop:config>

</beans>
